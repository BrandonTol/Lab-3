1)
# ask user for an input
user_input = int(input("Enter a number (1-7) to get the corresponding day of the week: "))

# define variables
days_of_week = {
    1: "Monday",
    2: "Tuesday",
    3: "Wednesday",
    4: "Thursday",
    5: "Friday",
    6: "Saturday",
    7: "Sunday"
}

# check if numbers in range
if 1 <= user_input <= 7:
    print(f"The day of the week is: {days_of_week[user_input]}")
else:
    print("Error: The number is outside the range of 1 through 7.")

# ---------------------------------------------------------------------------------------------------------------

2) 
# ask user for inputs
length1 = float(input("Enter the length of the first rectangle: "))
width1 = float(input("Enter the width of the first rectangle: "))

# ask user for inputs
length2 = float(input("Enter the length of the second rectangle: "))
width2 = float(input("Enter the width of the second rectangle: "))

# calculate areas
area1 = length1 * width1
area2 = length2 * width2

# compare areas and display the result
if area1 > area2:
    print("The first rectangle has a greater area.")
elif area2 > area1:
    print("The second rectangle has a greater area.")
else:
    print("Both rectangles have the same area.")

# ---------------------------------------------------------------------------------------------------------------

3)
# ask user for age
age = int(input("Enter the person's age: "))

# determine the category based on the age
if age <= 1:
    print("The person is an infant.")
elif 1 < age < 13:
    print("The person is a child.")
elif 13 <= age < 20:
    print("The person is a teenager.")
else:
    print("The person is an adult.")

# ---------------------------------------------------------------------------------------------------------------

4)
# ask the user for a number between 1 and 10
number = int(input("Enter a number (1-10): "))

# define numbers to roman numerals
roman_numerals = {
    1: "I",
    2: "II",
    3: "III",
    4: "IV",
    5: "V",
    6: "VI",
    7: "VII",
    8: "VIII",
    9: "IX",
    10: "X"
}

# check if numbers within range
if 1 <= number <= 10:
    print(f"The Roman numeral for {number} is: {roman_numerals[number]}")
else:
    print("Error: The number is outside the range of 1 through 10.")

# ---------------------------------------------------------------------------------------------------------------

5)
# ask user for input
mass = float(input("Enter the object's mass in kilograms: "))

# calculate weight
weight = mass * 9.8

# display the weight
print(f"The object's weight is {weight:.2f} newtons.")

# determine object weight
if weight > 500:
    print("The object is too heavy.")
elif weight < 100:
    print("The object is too light.")
else:
    print("The object's weight is within a normal range.")

# ---------------------------------------------------------------------------------------------------------------

6)
# ask the user to enter the month, day, and two-digit year
month = int(input("Enter the month (in numeric form): "))
day = int(input("Enter the day: "))
year = int(input("Enter the two-digit year: "))

# check if the month times the day equals the year
if month * day == year:
    print("The date is magic!")
else:
    print("The date is not magic.")

# ---------------------------------------------------------------------------------------------------------------

7)
# ask the user for an input
color1 = input("Enter the first primary color (red, blue, or yellow): ").lower()
color2 = input("Enter the second primary color (red, blue, or yellow): ").lower()

# list of valid primary colors
primary_colors = ["red", "blue", "yellow"]

# check if both inputs are valid primary colors
if color1 not in primary_colors or color2 not in primary_colors:
    print("Error: You must enter 'red', 'blue', or 'yellow'.")
elif color1 == color2:
    print("Error: You entered the same color twice. Please enter two different primary colors.")
else:
    # determine the resulting secondary color
    if (color1 == "red" and color2 == "blue") or (color1 == "blue" and color2 == "red"):
        print("Mixing red and blue gives you purple.")
    elif (color1 == "red" and color2 == "yellow") or (color1 == "yellow" and color2 == "red"):
        print("Mixing red and yellow gives you orange.")
    elif (color1 == "blue" and color2 == "yellow") or (color1 == "yellow" and color2 == "blue"):
        print("Mixing blue and yellow gives you green.")

# ---------------------------------------------------------------------------------------------------------------

8)
import math

# get input from the user
people = int(input("Enter the number of people attending the cookout: "))
hot_dogs_per_person = int(input("Enter the number of hot dogs each person will be given: "))

# numbers for package sizes
HOT_DOGS_PER_PACKAGE = 10
BUNS_PER_PACKAGE = 8

# calculate hot dogs needed
total_hot_dogs = people * hot_dogs_per_person

# calculate hot dog and bun packages needed
hot_dog_packages = math.ceil(total_hot_dogs / HOT_DOGS_PER_PACKAGE)
bun_packages = math.ceil(total_hot_dogs / BUNS_PER_PACKAGE)

# calculate leftovers
hot_dogs_leftover = (hot_dog_packages * HOT_DOGS_PER_PACKAGE) - total_hot_dogs
buns_leftover = (bun_packages * BUNS_PER_PACKAGE) - total_hot_dogs

# display the results
print(f"\nMinimum number of hot dog packages required: {hot_dog_packages}")
print(f"Minimum number of hot dog bun packages required: {bun_packages}")
print(f"Number of hot dogs that will be left over: {hot_dogs_leftover}")
print(f"Number of hot dog buns that will be left over: {buns_leftover}")

# ---------------------------------------------------------------------------------------------------------------

9)
# get an input
pocket_number = int(input("Enter a pocket number (0-36): "))

# determine color of the pocket
if pocket_number < 0 or pocket_number > 36:
    print("Error: The pocket number must be between 0 and 36.")
else:
    if pocket_number == 0:
        color = "green"
    elif 1 <= pocket_number <= 10:
        color = "red" if pocket_number % 2 != 0 else "black"
    elif 11 <= pocket_number <= 18:
        color = "black" if pocket_number % 2 != 0 else "red"
    elif 19 <= pocket_number <= 28:
        color = "red" if pocket_number % 2 != 0 else "black"
    elif 29 <= pocket_number <= 36:
        color = "black" if pocket_number % 2 != 0 else "red"
    
    # display
    print(f"Pocket {pocket_number} is {color}.")

# ---------------------------------------------------------------------------------------------------------------

10)
# coin values
PENNY_VALUE = 0.01
NICKEL_VALUE = 0.05
DIME_VALUE = 0.10
QUARTER_VALUE = 0.25

# ask user how much coins
pennies = int(input("Enter the number of pennies: "))
nickels = int(input("Enter the number of nickels: "))
dimes = int(input("Enter the number of dimes: "))
quarters = int(input("Enter the number of quarters: "))

# calculate total money
total_amount = (pennies * PENNY_VALUE) + (nickels * NICKEL_VALUE) + (dimes * DIME_VALUE) + (quarters * QUARTER_VALUE)

# check if theyre equal to one dollar
if total_amount == 1.00:
    print("Congratulations! You've won the game! The total amount is exactly one dollar.")
elif total_amount < 1.00:
    print("The total amount is less than one dollar. Try again!")
else:
    print("The total amount is more than one dollar. Try again!")

# ---------------------------------------------------------------------------------------------------------------

11)
# ask user how many books was purchased
books_purchased = int(input("Enter the number of books purchased this month: "))

# determine points based off books purchased
if books_purchased == 0:
    points = 0
elif books_purchased == 2:
    points = 5
elif books_purchased == 4:
    points = 15
elif books_purchased == 6:
    points = 30
elif books_purchased >= 8:
    points = 60
else:
    points = 0  # This handles the case where the number of books is not in the given ranges.

# display points rewarded
print(f"Number of points awarded: {points}")

# ---------------------------------------------------------------------------------------------------------------

12)
# constants
retail_price_per_package = 99.00
discounts = {
    (10, 19): 0.10,
    (20, 49): 0.20,
    (50, 99): 0.30,
    (100, float('inf')): 0.40
}

# ask user number of packages purchased
number_of_packages = int(input("Enter the number of packages purchased: "))

# determine the discount percentage
discount_percentage = 0
for quantity_range, discount in discounts.items():
    if quantity_range[0] <= number_of_packages <= quantity_range[1]:
        discount_percentage = discount
        break

# calculate total cost after the discount
total_price = number_of_packages * retail_price_per_package
discount_amount = total_price * discount_percentage
total_after_discount = total_price - discount_amount

# display the results
print(f"Discount percentage: {discount_percentage * 100}%")
print(f"Discount amount: ${discount_amount:.2f}")
print(f"Total amount after discount: ${total_after_discount:.2f}")

# ---------------------------------------------------------------------------------------------------------------

13)
# ask user for weight of package
weight = float(input("Enter the weight of the package in pounds: "))

# determine shipping rate based on weight
if weight <= 2:
    rate_per_pound = 1.50
elif 2 < weight <= 6:
    rate_per_pound = 3.00
elif 6 < weight <= 10:
    rate_per_pound = 4.00
else:
    rate_per_pound = 4.75

# calculate total shipping charge
shipping_charge = weight * rate_per_pound

# display the shipping charge
print(f"The shipping charge for a package weighing {weight:.2f} pounds is ${shipping_charge:.2f}.")

# ---------------------------------------------------------------------------------------------------------------

14)
# ask user for number of seconds
total_seconds = int(input("Enter the number of seconds: "))

# constants for time conversions
SECONDS_PER_MINUTE = 60
SECONDS_PER_HOUR = 3600
SECONDS_PER_DAY = 86400

# initialize the time components
days = hours = minutes = seconds = 0

# convert seconds to days, hours, minutes, and seconds
if total_seconds >= SECONDS_PER_DAY:
    days = total_seconds // SECONDS_PER_DAY
    total_seconds %= SECONDS_PER_DAY

if total_seconds >= SECONDS_PER_HOUR:
    hours = total_seconds // SECONDS_PER_HOUR
    total_seconds %= SECONDS_PER_HOUR

if total_seconds >= SECONDS_PER_MINUTE:
    minutes = total_seconds // SECONDS_PER_MINUTE
    total_seconds %= SECONDS_PER_MINUTE

seconds = total_seconds

# display the results
if days > 0:
    print(f"{days} day(s), {hours} hour(s), {minutes} minute(s), and {seconds} second(s)")
elif hours > 0:
    print(f"{hours} hour(s), {minutes} minute(s), and {seconds} second(s)")
elif minutes > 0:
    print(f"{minutes} minute(s), and {seconds} second(s)")
else:
    print(f"{seconds} second(s)")

# ---------------------------------------------------------------------------------------------------------------

15)
# ask user for a year
year = int(input("Enter a year: "))

# determine if its a leap year
if (year % 400 == 0) or (year % 100 != 0 and year % 4 == 0):
    days_in_february = 29
else:
    days_in_february = 28

# display number of days in February for that year
print(f"In {year}, February has {days_in_february} days.")

# ---------------------------------------------------------------------------------------------------------------

16)
def troubleshoot_wifi():
    # step 1
    print("Reboot the computer and try to connect.")
    response = input("Did that fix the problem? (yes/no): ").strip().lower()
    if response == "yes":
        print("Great! Your Wi-Fi issue is resolved.")
        return

    # step 2
    print("Reboot the router and try to connect.")
    response = input("Did that fix the problem? (yes/no): ").strip().lower()
    if response == "yes":
        print("Great! Your Wi-Fi issue is resolved.")
        return

    # step 3
    print("Make sure the cables between the router and modem are plugged in firmly.")
    response = input("Did that fix the problem? (yes/no): ").strip().lower()
    if response == "yes":
        print("Great! Your Wi-Fi issue is resolved.")
        return

    # step 4
    print("Move the router to a new location.")
    response = input("Did that fix the problem? (yes/no): ").strip().lower()
    if response == "yes":
        print("Great! Your Wi-Fi issue is resolved.")
        return

    # step 5
    print("Get a new router.")
    print("If the problem persists after trying all these steps, you may need to consult a professional.")

# run the troubleshooting program
troubleshoot_wifi()

# ---------------------------------------------------------------------------------------------------------------

17)
def find_suitable_restaurants():
    # define restaurants 
    restaurants = {
        "Joe's Gourmet Burgers": {"vegetarian": False, "vegan": False, "gluten_free": False},
        "Main Street Pizza Company": {"vegetarian": True, "vegan": False, "gluten_free": True},
        "Corner Cafe": {"vegetarian": True, "vegan": True, "gluten_free": True},
        "Mama's Fine Italian": {"vegetarian": True, "vegan": False, "gluten_free": False},
        "The Chef's Kitchen": {"vegetarian": True, "vegan": True, "gluten_free": True}
    }

    # ask user for preferences
    vegetarian = input("Is anyone in your party a vegetarian? (yes/no): ").strip().lower() == "yes"
    vegan = input("Is anyone in your party a vegan? (yes/no): ").strip().lower() == "yes"
    gluten_free = input("Is anyone in your party gluten-free? (yes/no): ").strip().lower() == "yes"

    # determine suitable restaurants
    suitable_restaurants = []
    for restaurant, options in restaurants.items():
        if (not vegetarian or options["vegetarian"]) and \
           (not vegan or options["vegan"]) and \
           (not gluten_free or options["gluten_free"]):
            suitable_restaurants.append(restaurant)

    # display the restaurant choices
    if suitable_restaurants:
        print("\nHere are your restaurant choices:")
        for restaurant in suitable_restaurants:
            print(f"   {restaurant}")
    else:
        print("\nNo restaurants match the dietary preferences provided.")

# run the program
find_suitable_restaurants()
